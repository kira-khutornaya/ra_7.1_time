{"version":3,"sources":["components/DateTime.js","components/withPretty.js","components/Video.js","components/VideoList.js","App.js","reportWebVitals.js","index.js"],"names":["DateTime","WrappedComponent","DateTimePretty","date","className","dateStr","moment","fromNow","this","props","changeDate","React","Component","Video","url","src","title","frameBorder","allow","allowFullScreen","VideoList","list","map","item","nanoid","defaultProps","App","useState","setList","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSAaeA,ICNoBC,ECF7BC,GDE6BD,EDJnC,YAA6B,IAATE,EAAQ,EAARA,KAClB,OACE,mBAAGC,UAAU,OAAb,SAAqBD,KCGvB,gKACE,SAAWE,GACT,OAAOC,IAAOD,GAASE,YAF3B,oBAKE,WAAU,IACAJ,EAASK,KAAKC,MAAdN,KAER,OAAO,cAACF,EAAD,2BAAsBO,KAAKC,OAA3B,IAAkCN,KAAMK,KAAKE,WAAWP,UARnE,GAAqBQ,IAAMC,YCadC,MAdf,YAA+B,IAAdC,EAAa,EAAbA,IAAKX,EAAQ,EAARA,KACpB,OACE,sBAAKC,UAAU,QAAf,UACE,wBAAQW,IAAKD,EAAKE,MAAOF,EAAKG,YAAY,IAAIC,MAAM,4BAA4BC,iBAAe,IAC/F,cAACjB,EAAD,CAAgBC,KAAMA,QCN5B,SAASiB,EAAT,GACE,OAD2B,EAARC,KACPC,KAAI,SAACC,GAAD,OACd,cAAC,EAAD,CACET,IAAKS,EAAKT,IACVX,KAAMoB,EAAKpB,MACNqB,kBAKXJ,EAAUK,aAAe,CACvBJ,KAAM,IAUOD,QCtBA,SAASM,IAAO,IAAD,EACJC,mBAAS,CAC/B,CACEb,IAAK,gFACLX,KAAM,uBAER,CACEW,IAAK,gFACLX,KAAM,uBAER,CACEW,IAAK,gFACLX,KAAM,uBAER,CACEW,IAAK,gFACLX,KAAM,uBAER,CACEW,IAAK,gFACLX,KAAM,uBAER,CACEW,IAAK,gFACLX,KAAM,yBAxBkB,mBACrBkB,EADqB,KACfO,EADe,KA8B5B,OAFAC,QAAQC,IAAIF,GAGV,cAAC,EAAD,CAAWP,KAAMA,ICnCrB,IAceU,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5d4d5db0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction DateTime({ date }) {\n  return (\n    <p className=\"date\">{date}</p>\n  );\n}\n\nDateTime.propTypes = {\n  date: PropTypes.string.isRequired,\n};\n\nexport default DateTime;\n","/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"changeDate\"] }] */\n/* eslint react/prop-types: 0 */\n\nimport React from 'react';\nimport moment from 'moment';\nimport 'moment/locale/ru';\n\nexport default function withPretty(WrappedComponent) {\n  return class extends React.Component {\n    changeDate(dateStr) {\n      return moment(dateStr).fromNow();\n    }\n\n    render() {\n      const { date } = this.props;\n\n      return <WrappedComponent {...this.props} date={this.changeDate(date)} />;\n    }\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport withPretty from './withPretty';\nimport DateTime from './DateTime';\n\nconst DateTimePretty = withPretty(DateTime);\n\nfunction Video({ url, date }) {\n  return (\n    <div className=\"video\">\n      <iframe src={url} title={url} frameBorder=\"0\" allow=\"autoplay; encrypted-media\" allowFullScreen />\n      <DateTimePretty date={date} />\n    </div>\n  );\n}\n\nVideo.propTypes = {\n  url: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n};\n\nexport default Video;\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport Video from './Video';\n\nfunction VideoList({ list }) {\n  return list.map((item) => (\n    <Video\n      url={item.url}\n      date={item.date}\n      key={nanoid()}\n    />\n  ));\n}\n\nVideoList.defaultProps = {\n  list: [],\n};\n\nVideoList.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.shape({\n    url: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n  })),\n};\n\nexport default VideoList;\n","import React, { useState } from 'react';\nimport './App.css';\nimport VideoList from './components/VideoList';\n\nexport default function App() {\n  const [list, setList] = useState([\n    {\n      url: 'https://www.youtube.com/embed/rN6nlNC9WQA?rel=0&amp;controls=0&amp;showinfo=0',\n      date: '2021-10-29 18:13:20',\n    },\n    {\n      url: 'https://www.youtube.com/embed/dVkK36KOcqs?rel=0&amp;controls=0&amp;showinfo=0',\n      date: '2021-10-29 15:21:00',\n    },\n    {\n      url: 'https://www.youtube.com/embed/xGRjCa49C6U?rel=0&amp;controls=0&amp;showinfo=0',\n      date: '2021-10-28 17:16:00',\n    },\n    {\n      url: 'https://www.youtube.com/embed/RK1K2bCg4J8?rel=0&amp;controls=0&amp;showinfo=0',\n      date: '2021-10-26 09:10:00',\n    },\n    {\n      url: 'https://www.youtube.com/embed/TKmGU77INaM?rel=0&amp;controls=0&amp;showinfo=0',\n      date: '2021-08-01 16:17:00',\n    },\n    {\n      url: 'https://www.youtube.com/embed/TxbE79-1OSI?rel=0&amp;controls=0&amp;showinfo=0',\n      date: '2020-07-02 05:24:00',\n    },\n  ]);\n\n  console.log(setList); // для ESLint\n\n  return (\n    <VideoList list={list} />\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}